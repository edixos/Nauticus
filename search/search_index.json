{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Nauticus","text":"<p>Project under development</p> <p>The Nauticus Controller is currently under development. This means that the controller is functional, but it may not yet be fully tested, and there may be bugs or unfinished features. Please also keep in mind that as the controller is under development, the API may change, and backward compatibility may not be guaranteed. We will do our best to minimize breaking changes, but it's possible that some changes may be necessary as the controller evolves. We encourage users to test the controller in a non-production environment, and to report any bugs or issues that they encounter. We are committed to making the Nauticus Controller a robust and reliable tool for managing Kubernetes clusters, and we appreciate your feedback and support as we work towards this goal.</p> <p>Welcome to Nauticus, the Kubernetes space management controller. With Nauticus, you can easily create, update, and delete spaces within your Kubernetes cluster. Each space is a unique namespace with its own set of resources and quotas, making it ideal for multi-tenancy environments.</p> <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li>\u2705 Resource Quotas: Assign resource quotas to each space, ensuring that no one team can consume too many resources.</li> <li>\u2705 Network Policies: Create network policies for each space, restricting ingress communication from other spaces or namespaces.</li> <li>\u2705 Space Owners: Specify the owner(s) of each space, giving them full control over the resources within.</li> <li>\u2705 Additional RoleBindings: Assign additional role bindings to each space, providing fine-grained access control.</li> <li>\u2705 LimitRanges: Assign Limit Ranges to each space, providing an additional layer of control over resource utilization in the cluster.</li> <li>\u2705 ServiceAccounts: Create Kubernetes Service Accounts to act as a Cloud Provider Service Account.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with Nauticus, check out our installation guide and tutorial to learn more about the features and how to use them.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing-to-nauticus","title":"Contributing to Nauticus","text":"<p>Thank you for your interest in contributing to Nauticus. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community.</p> <p>Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.</p>"},{"location":"crds-apis/","title":"API Specification","text":""},{"location":"crds-apis/#api-reference","title":"API Reference","text":"<p>Packages:</p> <ul> <li>nauticus.io/v1alpha1</li> </ul>"},{"location":"crds-apis/#nauticusiov1alpha1","title":"nauticus.io/v1alpha1","text":"<p>Resource Types:</p> <ul> <li>Space</li> </ul>"},{"location":"crds-apis/#space","title":"Space","text":"<p>Space is the Schema for the spaces API.</p> Name Type Description Required apiVersion string nauticus.io/v1alpha1 true kind string Space true metadata object Refer to the Kubernetes API documentation for the fields of the `metadata` field. true spec object            SpaceSpec defines the desired state of Space. false status object            SpaceStatus defines the observed state of Space. false"},{"location":"crds-apis/#spacespec","title":"Space.spec","text":"<p>SpaceSpec defines the desired state of Space.</p> Name Type Description Required additionalRoleBindings []object            Specifies additional RoleBindings assigned to the Space. Nauticus will ensure that the namespace in the Space always contain the RoleBinding for the given ClusterRole. Optional. false limitRanges object            Specifies the resource min/max usage restrictions to the Space. Optional. false networkPolicies object            Specifies the NetworkPolicies assigned to the Tenant. The assigned NetworkPolicies are inherited by the namespace created in the Space. Optional. false owners []object            Specifies the owners of the Space. Mandatory. false resourceQuota object            Specifies a list of ResourceQuota resources assigned to the Space. The assigned values are inherited by the namespace created by the Space. Optional. false serviceAccounts object            Specifies a list of service account to create within the Space. Optional false"},{"location":"crds-apis/#spacespecadditionalrolebindingsindex","title":"Space.spec.additionalRoleBindings[index]","text":"Name Type Description Required roleRef object            RoleRef contains information that points to the role being used false subjects []object false"},{"location":"crds-apis/#spacespecadditionalrolebindingsindexroleref","title":"Space.spec.additionalRoleBindings[index].roleRef","text":"<p>RoleRef contains information that points to the role being used</p> Name Type Description Required apiGroup string            APIGroup is the group for the resource being referenced true kind string            Kind is the type of resource being referenced true name string            Name is the name of resource being referenced true"},{"location":"crds-apis/#spacespecadditionalrolebindingsindexsubjectsindex","title":"Space.spec.additionalRoleBindings[index].subjects[index]","text":"<p>Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.</p> Name Type Description Required kind string            Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error. true name string            Name of the object being referenced. true apiGroup string            APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects. false namespace string            Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error. false"},{"location":"crds-apis/#spacespeclimitranges","title":"Space.spec.limitRanges","text":"<p>Specifies the resource min/max usage restrictions to the Space. Optional.</p> Name Type Description Required items []object false"},{"location":"crds-apis/#spacespeclimitrangesitemsindex","title":"Space.spec.limitRanges.items[index]","text":"<p>LimitRangeSpec defines a min/max usage limit for resources that match on kind.</p> Name Type Description Required limits []object            Limits is the list of LimitRangeItem objects that are enforced. true"},{"location":"crds-apis/#spacespeclimitrangesitemsindexlimitsindex","title":"Space.spec.limitRanges.items[index].limits[index]","text":"<p>LimitRangeItem defines a min/max usage limit for any resource that matches on kind.</p> Name Type Description Required type string            Type of resource that this limit applies to. true default map[string]int or string            Default resource requirement limit value by resource name if resource limit is omitted. false defaultRequest map[string]int or string            DefaultRequest is the default resource requirement request value by resource name if resource request is omitted. false max map[string]int or string            Max usage constraints on this kind by resource name. false maxLimitRequestRatio map[string]int or string            MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource. false min map[string]int or string            Min usage constraints on this kind by resource name. false"},{"location":"crds-apis/#spacespecnetworkpolicies","title":"Space.spec.networkPolicies","text":"<p>Specifies the NetworkPolicies assigned to the Tenant. The assigned NetworkPolicies are inherited by the namespace created in the Space. Optional.</p> Name Type Description Required enableDefaultStrictMode boolean false items []object false"},{"location":"crds-apis/#spacespecnetworkpoliciesitemsindex","title":"Space.spec.networkPolicies.items[index]","text":"<p>NetworkPolicySpec provides the specification of a NetworkPolicy</p> Name Type Description Required podSelector object            Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace. true egress []object            List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8 false ingress []object            List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default) false policyTypes []string            List of rule types that the NetworkPolicy relates to. Valid options are [\"Ingress\"], [\"Egress\"], or [\"Ingress\", \"Egress\"]. If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ \"Egress\" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include \"Egress\" (since such a policy would not include an Egress section and would otherwise default to just [ \"Ingress\" ]). This field is beta-level in 1.8 false"},{"location":"crds-apis/#spacespecnetworkpoliciesitemsindexpodselector","title":"Space.spec.networkPolicies.items[index].podSelector","text":"<p>Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.</p> Name Type Description Required matchExpressions []object            matchExpressions is a list of label selector requirements. The requirements are ANDed. false matchLabels map[string]string            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed. false"},{"location":"crds-apis/#spacespecnetworkpoliciesitemsindexpodselectormatchexpressionsindex","title":"Space.spec.networkPolicies.items[index].podSelector.matchExpressions[index]","text":"<p>A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.</p> Name Type Description Required key string            key is the label key that the selector applies to. true operator string            operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. true values []string            values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. false"},{"location":"crds-apis/#spacespecnetworkpoliciesitemsindexegressindex","title":"Space.spec.networkPolicies.items[index].egress[index]","text":"<p>NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8</p> Name Type Description Required ports []object            List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list. false to []object            List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list. false"},{"location":"crds-apis/#spacespecnetworkpoliciesitemsindexegressindexportsindex","title":"Space.spec.networkPolicies.items[index].egress[index].ports[index]","text":"<p>NetworkPolicyPort describes a port to allow traffic on</p> Name Type Description Required endPort integer            If set, indicates that the range of ports from port to endPort, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port. Format: int32 false port int or string            The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched. false protocol string            The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP. Default: TCP false"},{"location":"crds-apis/#spacespecnetworkpoliciesitemsindexegressindextoindex","title":"Space.spec.networkPolicies.items[index].egress[index].to[index]","text":"<p>NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed</p> Name Type Description Required ipBlock object            IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be. false namespaceSelector object            Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.   If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector. false podSelector object            This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.   If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace. false"},{"location":"crds-apis/#spacespecnetworkpoliciesitemsindexegressindextoindexipblock","title":"Space.spec.networkPolicies.items[index].egress[index].to[index].ipBlock","text":"<p>IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.</p> Name Type Description Required cidr string            CIDR is a string representing the IP Block Valid examples are \"192.168.1.1/24\" or \"2001:db9::/64\" true except []string            Except is a slice of CIDRs that should not be included within an IP Block Valid examples are \"192.168.1.1/24\" or \"2001:db9::/64\" Except values will be rejected if they are outside the CIDR range false"},{"location":"crds-apis/#spacespecnetworkpoliciesitemsindexegressindextoindexnamespaceselector","title":"Space.spec.networkPolicies.items[index].egress[index].to[index].namespaceSelector","text":"<p>Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.   If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.</p> Name Type Description Required matchExpressions []object            matchExpressions is a list of label selector requirements. The requirements are ANDed. false matchLabels map[string]string            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed. false"},{"location":"crds-apis/#spacespecnetworkpoliciesitemsindexegressindextoindexnamespaceselectormatchexpressionsindex","title":"Space.spec.networkPolicies.items[index].egress[index].to[index].namespaceSelector.matchExpressions[index]","text":"<p>A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.</p> Name Type Description Required key string            key is the label key that the selector applies to. true operator string            operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. true values []string            values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. false"},{"location":"crds-apis/#spacespecnetworkpoliciesitemsindexegressindextoindexpodselector","title":"Space.spec.networkPolicies.items[index].egress[index].to[index].podSelector","text":"<p>This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.   If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.</p> Name Type Description Required matchExpressions []object            matchExpressions is a list of label selector requirements. The requirements are ANDed. false matchLabels map[string]string            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed. false"},{"location":"crds-apis/#spacespecnetworkpoliciesitemsindexegressindextoindexpodselectormatchexpressionsindex","title":"Space.spec.networkPolicies.items[index].egress[index].to[index].podSelector.matchExpressions[index]","text":"<p>A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.</p> Name Type Description Required key string            key is the label key that the selector applies to. true operator string            operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. true values []string            values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. false"},{"location":"crds-apis/#spacespecnetworkpoliciesitemsindexingressindex","title":"Space.spec.networkPolicies.items[index].ingress[index]","text":"<p>NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.</p> Name Type Description Required from []object            List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list. false ports []object            List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list. false"},{"location":"crds-apis/#spacespecnetworkpoliciesitemsindexingressindexfromindex","title":"Space.spec.networkPolicies.items[index].ingress[index].from[index]","text":"<p>NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed</p> Name Type Description Required ipBlock object            IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be. false namespaceSelector object            Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.   If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector. false podSelector object            This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.   If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace. false"},{"location":"crds-apis/#spacespecnetworkpoliciesitemsindexingressindexfromindexipblock","title":"Space.spec.networkPolicies.items[index].ingress[index].from[index].ipBlock","text":"<p>IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.</p> Name Type Description Required cidr string            CIDR is a string representing the IP Block Valid examples are \"192.168.1.1/24\" or \"2001:db9::/64\" true except []string            Except is a slice of CIDRs that should not be included within an IP Block Valid examples are \"192.168.1.1/24\" or \"2001:db9::/64\" Except values will be rejected if they are outside the CIDR range false"},{"location":"crds-apis/#spacespecnetworkpoliciesitemsindexingressindexfromindexnamespaceselector","title":"Space.spec.networkPolicies.items[index].ingress[index].from[index].namespaceSelector","text":"<p>Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.   If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.</p> Name Type Description Required matchExpressions []object            matchExpressions is a list of label selector requirements. The requirements are ANDed. false matchLabels map[string]string            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed. false"},{"location":"crds-apis/#spacespecnetworkpoliciesitemsindexingressindexfromindexnamespaceselectormatchexpressionsindex","title":"Space.spec.networkPolicies.items[index].ingress[index].from[index].namespaceSelector.matchExpressions[index]","text":"<p>A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.</p> Name Type Description Required key string            key is the label key that the selector applies to. true operator string            operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. true values []string            values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. false"},{"location":"crds-apis/#spacespecnetworkpoliciesitemsindexingressindexfromindexpodselector","title":"Space.spec.networkPolicies.items[index].ingress[index].from[index].podSelector","text":"<p>This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.   If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.</p> Name Type Description Required matchExpressions []object            matchExpressions is a list of label selector requirements. The requirements are ANDed. false matchLabels map[string]string            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed. false"},{"location":"crds-apis/#spacespecnetworkpoliciesitemsindexingressindexfromindexpodselectormatchexpressionsindex","title":"Space.spec.networkPolicies.items[index].ingress[index].from[index].podSelector.matchExpressions[index]","text":"<p>A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.</p> Name Type Description Required key string            key is the label key that the selector applies to. true operator string            operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. true values []string            values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. false"},{"location":"crds-apis/#spacespecnetworkpoliciesitemsindexingressindexportsindex","title":"Space.spec.networkPolicies.items[index].ingress[index].ports[index]","text":"<p>NetworkPolicyPort describes a port to allow traffic on</p> Name Type Description Required endPort integer            If set, indicates that the range of ports from port to endPort, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port. Format: int32 false port int or string            The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched. false protocol string            The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP. Default: TCP false"},{"location":"crds-apis/#spacespecownersindex","title":"Space.spec.owners[index]","text":"<p>Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.</p> Name Type Description Required kind string            Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error. true name string            Name of the object being referenced. true apiGroup string            APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects. false namespace string            Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error. false"},{"location":"crds-apis/#spacespecresourcequota","title":"Space.spec.resourceQuota","text":"<p>Specifies a list of ResourceQuota resources assigned to the Space. The assigned values are inherited by the namespace created by the Space. Optional.</p> Name Type Description Required hard map[string]int or string            hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/ false scopeSelector object            scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched. false scopes []string            A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects. false"},{"location":"crds-apis/#spacespecresourcequotascopeselector","title":"Space.spec.resourceQuota.scopeSelector","text":"<p>scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.</p> Name Type Description Required matchExpressions []object            A list of scope selector requirements by scope of the resources. false"},{"location":"crds-apis/#spacespecresourcequotascopeselectormatchexpressionsindex","title":"Space.spec.resourceQuota.scopeSelector.matchExpressions[index]","text":"<p>A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.</p> Name Type Description Required operator string            Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. true scopeName string            The name of the scope that the selector applies to. true values []string            An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. false"},{"location":"crds-apis/#spacespecserviceaccounts","title":"Space.spec.serviceAccounts","text":"<p>Specifies a list of service account to create within the Space. Optional</p> Name Type Description Required items []object            Specifies the list of Service Account to be created. Optional false"},{"location":"crds-apis/#spacespecserviceaccountsitemsindex","title":"Space.spec.serviceAccounts.items[index]","text":"Name Type Description Required annotations map[string]string            Specifies the annotations to be placed in the ServiceAccount. Optional false name string            Specifies the service account name to be created. Required false"},{"location":"crds-apis/#spacestatus","title":"Space.status","text":"<p>SpaceStatus defines the observed state of Space.</p> Name Type Description Required namespaceName string            NamespaceName the name of the created underlying namespace. false"},{"location":"getting-started/","title":"Installation","text":""},{"location":"getting-started/#introduction","title":"Introduction","text":"<p>Welcome to the Nauticus Controller! This project provides a Kubernetes controller that allows you to easily manage <code>Spaces</code>, a fully-managed Kubernetes namespace that integrates RBAC, network policies, resources, and quotas and more. This getting started guide will walk you through the process of installing and configuring Nauticus for your Kubernetes cluster, as well as give an overview of the features and functionality provided by the controller. We hope that this guide will help you to quickly get up and running with Nauticus, and start taking advantage of the powerful tooling it provides. Let's get started!</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>A running Kubernetes cluster (version 1.17 or later) with kubectl command-line tool installed and configured on your   machine.</li> <li>Access to the cluster with cluster-admin permissions.</li> <li>Familiarity with Kubernetes concepts such as namespaces, RBAC, and resources.</li> </ul> <p>Before you begin, please ensure that you have a running Kubernetes cluster and you have the kubectl command-line tool installed and configured on your machine. If you don't have a cluster, you can create one using the kind command. You must also have cluster-admin permissions to be able to use Nauticus.</p> <p>It is also recommended to have basic understanding of Kubernetes concepts such as namespaces, RBAC, and resources.</p> <p>Once you have everything set up, you can proceed to the next step of the guide.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>In this section, we will explain how to install Nauticus using Helm and kubectl.</p>"},{"location":"getting-started/#helm","title":"Helm","text":"<p>Chart Not available Yet</p> <p>The project is under active development, the chart will be available soon. Please refer to kubectl installation method.</p> <ol> <li>Make sure that you have docker and kind installed if you want to create a kubernetes cluster within Docker</li> <li> <p>Start by creating a new Kubernetes cluster with kind command if you don't have one.</p> Create a kind cluster<pre><code>kind create cluster --image kindest/node:v1.24.1 --wait 5m --name nauticus\n</code></pre> </li> <li> <p>Make sure that you have Helm and kubectl installed on your machine. If you don't have them installed, you can find    instructions on how to install them here: helm and    here kubectl.</p> </li> <li> <p>Use the following command to add the Nauticus Helm repository:</p> Add Nauticus Helm Repository<pre><code>helm repo add nauticus https://nauticus.github.io/charts\n</code></pre> </li> <li> <p>Use the following command to install Nauticus:</p> Install Naurticus with Helm<pre><code>helm install nauticus nauticus/nauticus\n</code></pre> </li> <li> <p>Use the following command to check the status of the Nauticus pods:</p> Get Nauticus Controller pod<pre><code>kubectl get pods -n nauticus-system\n</code></pre> </li> <li> <p>Use the following command to verify that the Nauticus controller is running:      Get Nauticus Controller logs<pre><code>kubectl logs -f &lt;nauticus-controller-pod-name&gt; -n nauticus-system\n</code></pre></p> </li> </ol> <p>Now you can start using Nauticus to create and manage Spaces in your cluster.</p>"},{"location":"getting-started/#kubectl","title":"Kubectl","text":"<p>In this section, we will go through the steps to install Nauticus using a kubectl manifest file. This file contains all the resources needed for Nauticus to function properly.</p> <ol> <li> <p>Apply the manifest file using kubectl:</p> Install Nauticus from all-in-one manifest file<pre><code>kubectl apply -f https://raw.githubusercontent.com/edixos/nauticus/main/config/install.yam\n</code></pre> </li> <li> <p>Use the following command to check the status of the Nauticus pods:      Get Nauticus Controller pod<pre><code>kubectl get pods -n nauticus-system\n</code></pre></p> </li> <li>Use the following command to verify that the Nauticus controller is running:      Get Nauticus Controller logs<pre><code>kubectl logs -f &lt;nauticus-controller-pod-name&gt; -n nauticus-system\n</code></pre></li> </ol>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":"<p>To use Nauticus to create a new space, you can use the following kubectl command:</p> Create a basic Space<pre><code> cat &lt;&lt;EOF | kubectl apply -f -\n apiVersion: nauticus.com/v1alpha1\n kind: Space\n metadata:\n name: my-space\n EOF\n</code></pre> <p>The space will create a namespace and update the status of the <code>Space</code> by adding <code>status.NamespaceName</code> to it. For more details on how to use space's features please refer to the Tutorial.</p>"},{"location":"tutorial/","title":"Space Tutorial","text":""},{"location":"tutorial/#introduction","title":"Introduction","text":"<p>Welcome to the Nauticus tutorial page! Here, you will learn about the powerful features of Nauticus, a Kubernetes controller that simplifies the management of spaces within your cluster. Spaces are fully-managed namespaces that integrate with RBAC, network policies, resources, and quotas. With Nauticus, you can easily create, update, and delete spaces, as well as manage additional resources such as service accounts and limit ranges. This tutorial will guide you through the process of using Nauticus to manage your spaces and resources, and provide examples of how to utilize its features to improve your workflow. Let's get started!</p>"},{"location":"tutorial/#specify-spaces-owners","title":"Specify Space's owner(s)","text":"<p>In the Nauticus controller, you have the option to specify the owner(s) of a space. This allows you to assign specific users or teams to be responsible for managing the resources within a particular space. This feature is particularly useful in a multi-tenant environment, where different teams may be responsible for different parts of the application.</p> <p>To specify the owner(s) of a space, you can add the \"owners\" field in the space specification. The field should contain a list of email addresses of the users or teams that will be designated as the owner(s) of the space. For example, if you want to assign the space to the team <code>dev-team@example.com</code>, the space specification would look like this:</p> config/samples/space_with_owners.yaml<pre><code>apiVersion: nauticus.io/v1alpha1\nkind: Space\nmetadata:\nlabels:\napp.kubernetes.io/name: space\napp.kubernetes.io/instance: space-sample\napp.kubernetes.io/part-of: nauticus\napp.kubernetes.io/managed-by: kustomize\napp.kubernetes.io/created-by: nauticus\nname: space-sample-owners\nspec:\nowners:\n- name: dev-team@example.com\nkind: Group\n</code></pre> Create Space with Resource Quota<pre><code>kubectl apply -f config/samples/space_with_owners.yaml\n</code></pre>"},{"location":"tutorial/#space-with-resource-quota","title":"Space with Resource Quota","text":"<p>This section is dedicated to showcasing how Nauticus can be used to assign resource quotas to underlying namespaces. This feature is particularly useful for ensuring that resources are being utilized efficiently within a namespace, and can also be used to prevent overconsumption of resources.</p> <p>To begin, you will need to create a new Space resource and specify the desired resource quotas within the resource definition. For example, you may want to set a limit on the number of pods that can be created within the namespace, or limit the amount of CPU and memory that can be consumed.</p> <p>Here his an example of a Space with resource quota specification:</p> config/samples/space_with_resource_quotas.yaml<pre><code>apiVersion: nauticus.io/v1alpha1\nkind: Space\nmetadata:\nlabels:\napp.kubernetes.io/name: space\napp.kubernetes.io/instance: space-sample\napp.kubernetes.io/part-of: nauticus\napp.kubernetes.io/managed-by: kustomize\napp.kubernetes.io/created-by: nauticus\nname: space-sample-rc\nspec:\nresourceQuota:\nhard:\nlimits.cpu: \"8\"\nlimits.memory: 16Gi\nrequests.cpu: \"8\"\nrequests.memory: 16Gi\n</code></pre> <p>Once you have defined the resource quotas, you can use the kubectl apply command to create the Space and apply the resource quotas to the underlying namespace.</p> Create Space with Resource Quota<pre><code>kubectl apply -f config/samples/space_with_resource_quotas.yaml\n</code></pre> <p>You can also update or remove the resource quotas by updating or delete the space resource. The update will be automatically propagate to the underlying namespace.</p>"},{"location":"tutorial/#space-with-network-policies","title":"Space with Network Policies","text":"<p>Network policies are an important aspect of securing and isolating resources within a Kubernetes cluster. Nauticus allows you to easily create and manage network policies for your spaces.</p> <p>When you create a space, you have the option to specify a <code>enableDefaultStrictMode</code> parameter. When set to true, Nauticus will create a default network policy that restricts ingress communication from other spaces or namespaces, except for namespaces that have the label <code>nauticus.io/role: system</code>. This default policy will help secure your space and prevent unauthorized access to your resources.</p> <p>To create a network policy for your space, you can use the kubectl command line tool and specify the desired rules in a manifest file. Here is an example of a manifest file that creates a network policy in underlying space's namespace.</p> config/samples/space_with_network_policy.yaml<pre><code>apiVersion: nauticus.io/v1alpha1\nkind: Space\nmetadata:\nlabels:\napp.kubernetes.io/name: space\napp.kubernetes.io/instance: space-sample\napp.kubernetes.io/part-of: nauticus\napp.kubernetes.io/managed-by: kustomize\napp.kubernetes.io/created-by: nauticus\nname: space-sample-np\nspec:\nnetworkPolicies:\nenableDefaultStrictMode: true # false\nitems:\n- policyTypes:\n- Ingress\n- Egress\negress:\n- to:\n- ipBlock:\ncidr: 0.0.0.0/0\nexcept:\n- 192.168.0.0/16\ningress:\n- from:\n- namespaceSelector:\nmatchLabels:\napp.kubernetes.io/instance: space-all-in-one\n- podSelector: { }\n- ipBlock:\ncidr: 192.168.0.0/16\npodSelector: { }\n</code></pre> Create Space with Network Policy<pre><code>kubectl apply -f config/samples/space_with_network_policy.yaml\n</code></pre>"},{"location":"tutorial/#assign-additional-rolebindings","title":"Assign Additional RoleBindings","text":"<p>One of the features of Nauticus is the ability to assign additional role bindings to a space. This allows you to grant specific roles and permissions to users or service accounts within the space.</p> <p>To assign additional role bindings, you can include the <code>additionalRoleBindings</code> field in the space specification. This field should contain a list of objects, each with <code>subjects</code> and <code>roleRef</code> field.</p> config/samples/space_with_additional_rolebindings.yaml<pre><code>apiVersion: nauticus.io/v1alpha1\nkind: Space\nmetadata:\nlabels:\napp.kubernetes.io/name: space\napp.kubernetes.io/instance: space-sample\napp.kubernetes.io/part-of: nauticus\napp.kubernetes.io/managed-by: kustomize\napp.kubernetes.io/created-by: nauticus\nname: space-sample-add-rb\nspec:\nadditionalRoleBindings:\n- roleRef:\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: viewer\nsubjects:\n- name: Sam\nkind: User\n</code></pre> Create Space with Network Policy<pre><code>kubectl apply -f config/samples/space_with_additional_rolebindings.yaml\n</code></pre>"},{"location":"tutorial/#assign-limit-ranges","title":"Assign Limit Ranges","text":"<p>The limit range feature in Nauticus allows users to set constraints on the resources that can be requested and consumed by the containers in a namespace. This feature provides an additional layer of control over resource utilization in the cluster, ensuring that high resource-intensive workloads do not affect the performance of other services. To utilize this feature, users can specify limit ranges in their <code>Space</code> configuration and Nauticus will enforce these limits at runtime. This provides a simple and effective way to manage the resource consumption in a multi-tenant cluster environment.</p> config/samples/space_with_limit_ranges.yaml<pre><code>apiVersion: nauticus.io/v1alpha1\nkind: Space\nmetadata:\nlabels:\napp.kubernetes.io/name: space\napp.kubernetes.io/instance: space-sample\napp.kubernetes.io/part-of: nauticus\napp.kubernetes.io/managed-by: kustomize\napp.kubernetes.io/created-by: nauticus\nname: space-sample-lr\nspec:\nlimitRanges:\nitems:\n-\nlimits:\n-\nmax:\ncpu: \"1\"\nmemory: 1Gi\nmin:\ncpu: 50m\nmemory: 5Mi\ntype: Pod\n-\ndefault:\ncpu: 200m\nmemory: 100Mi\ndefaultRequest:\ncpu: 100m\nmemory: 10Mi\nmax:\ncpu: \"1\"\nmemory: 1Gi\nmin:\ncpu: 50m\nmemory: 5Mi\ntype: Container\n-\nmax:\nstorage: 10Gi\nmin:\nstorage: 1Gi\ntype: PersistentVolumeClaim\n</code></pre> Create Space with Network Policy<pre><code>kubectl apply -f config/samples/space_with_limit_ranges.yaml\n</code></pre>"},{"location":"tutorial/#create-spaces-service-accounts","title":"Create Space's Service Accounts","text":"<p>Nauticus provides a convenient way to create a Kubernetes Service Account that can be used as a Cloud Provider Service Account using Cloud specific IAM Binding. Instead of manually creating the Service Account and adding the necessary annotations to bind it with the cloud-specific IAM, Nauticus allows you to simply create the Service Account with the desired annotations.</p> <p>To create a Service Account using Nauticus, simply specify the desired annotations in the Space configuration file. Nauticus will then take care of creating the Service Account with the specified annotations.</p> GCPAWSMicrosoft Azure <p>For more details about Workload Identity.</p> <pre><code>apiVersion: nauticus.io/v1alpha1\nkind: Space\nmetadata:\nlabels:\napp.kubernetes.io/name: space\napp.kubernetes.io/instance: space-sample\napp.kubernetes.io/part-of: nauticus\napp.kubernetes.io/managed-by: kustomize\napp.kubernetes.io/created-by: nauticus\nname: space-sample-sa\nspec:\nserviceAccounts:\nitems:\n- name: cloudsql\nannotations:\niam.gke.io/gcp-service-account: cloudsql@GSA_PROJECT.iam.gserviceaccount.com\n- name: gcs\nannotations:\niam.gke.io/gcp-service-account: gcs@GSA_PROJECT.iam.gserviceaccount.com\n</code></pre> Create Space with Service Account (GCP Binding)<pre><code>kubectl apply -f config/samples/space_with_gcp_service_accounts.yaml\n</code></pre> <p>For more details about Configuring a Kubernetes service account to assume an IAM role.</p> <pre><code>apiVersion: nauticus.io/v1alpha1\nkind: Space\nmetadata:\nlabels:\napp.kubernetes.io/name: space\napp.kubernetes.io/instance: space-sample\napp.kubernetes.io/part-of: nauticus\napp.kubernetes.io/managed-by: kustomize\napp.kubernetes.io/created-by: nauticus\nname: space-sample-sa\nspec:\nserviceAccounts:\nitems:\n- name: rds\nannotations:\neks.amazonaws.com/role-arn: arn:aws:iam::111122223333:role/rds\n</code></pre> Create Space with Service Account (AWS Binding)<pre><code>kubectl apply -f config/samples/space_with_aws_service_accounts.yaml\n</code></pre> <p>For more details about Azure Workload Identity.</p> <pre><code>apiVersion: nauticus.io/v1alpha1\nkind: Space\nmetadata:\nlabels:\napp.kubernetes.io/name: space\napp.kubernetes.io/instance: space-sample\napp.kubernetes.io/part-of: nauticus\napp.kubernetes.io/managed-by: kustomize\napp.kubernetes.io/created-by: nauticus\nname: space-sample-sa\nspec:\nserviceAccounts:\nitems:\n- name: azuresql\nannotations:\nazure.workload.identity/tenant-id: \"${APPLICATION_OR_USER_ASSIGNED_IDENTITY_TENANT_ID}\"\n</code></pre> Create Space with Service Account (Azure Binding)<pre><code>kubectl apply -f config/samples/space_with_azure_service_accounts.yaml\n</code></pre> <p>Once the Space is created, Nauticus will create a Service Account with the specified annotations and assign it to the underlying Namespace. This allows the Namespace to access the necessary resources in the cloud provider, as specified by the annotations.</p>"},{"location":"tutorial/#space-example-with-all-features-combined","title":"Space Example with All Features Combined","text":"<p>In this example, we will demonstrate how to create a Space in Nauticus that combines all the features discussed so far: resource quota, network policy, space owners, and additional role bindings.</p> config/samples/space_with_all.yaml<pre><code>apiVersion: nauticus.io/v1alpha1\nkind: Space\nmetadata:\nlabels:\napp.kubernetes.io/name: space\napp.kubernetes.io/instance: space-all-in-one\napp.kubernetes.io/part-of: nauticus\napp.kubernetes.io/managed-by: kustomize\napp.kubernetes.io/created-by: nauticus\nname: space-all-in-one\nspec:\nresourceQuota:\nhard:\nlimits.cpu: \"8\"\nlimits.memory: 16Gi\nrequests.cpu: \"8\"\nrequests.memory: 16Gi\nowners:\n- name: smile\nkind: User\n- name: smile@group.com\nkind: Group\nadditionalRoleBindings:\n- roleRef:\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: viewer\nsubjects:\n- name: alice\nkind: User\nnetworkPolicies:\nenableDefaultStrictMode: true # false\nitems:\n- policyTypes:\n- Ingress\n- Egress\negress:\n- to:\n- ipBlock:\ncidr: 0.0.0.0/0\nexcept:\n- 192.168.0.0/16\ningress:\n- from:\n- namespaceSelector:\nmatchLabels:\napp.kubernetes.io/instance: space-all-in-one\n- podSelector: { }\n- ipBlock:\ncidr: 192.168.0.0/16\npodSelector: { }\nlimitRanges:\nitems:\n- limits:\n- max:\ncpu: \"1\"\nmemory: 1Gi\nmin:\ncpu: 50m\nmemory: 5Mi\ntype: Pod\n- default:\ncpu: 200m\nmemory: 100Mi\ndefaultRequest:\ncpu: 100m\nmemory: 10Mi\nmax:\ncpu: \"1\"\nmemory: 1Gi\nmin:\ncpu: 50m\nmemory: 5Mi\ntype: Container\n- max:\nstorage: 10Gi\nmin:\nstorage: 1Gi\ntype: PersistentVolumeClaim\nserviceAccounts:\nitems:\n- name: cloudsql\nannotations:\niam.gke.io/gcp-service-account: cloudsql@GSA_PROJECT.iam.gserviceaccount.com\n- name: gcs\nannotations:\niam.gke.io/gcp-service-account: gcs@GSA_PROJECT.iam.gserviceaccount.com\n</code></pre> Create Space with all features<pre><code>kubectl apply -f config/samples/space_with_all.yaml\n</code></pre> <p>After creating the Space resource, you can verify the resource quota and network policy by checking the respective resources in the namespace created for this Space. You can also check the role bindings and owners by using the</p> Retreive Space informations<pre><code>kubectl get rolebindings,networkpolicies,resourcequotas,limitranges -n space-all-in-one \nkubectl describe space space-all-in-one </code></pre> <p>This Space example demonstrates how Nauticus enables you to easily manage and control your Kubernetes resources by combining various features in a single resource.</p>"},{"location":"contributing/coc/","title":"Code of Conduct","text":""},{"location":"contributing/coc/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"contributing/coc/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"contributing/coc/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"contributing/coc/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"contributing/coc/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at contact@external-secrets.io. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"contributing/coc/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"contributing/coc/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"contributing/coc/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"contributing/coc/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"contributing/coc/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"contributing/coc/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/dev-guide/","title":"Developer Guide","text":""},{"location":"contributing/dev-guide/#getting-started","title":"Getting Started","text":"<p>You must have a working Go environment and then fork the repo and clone it:</p> Clone Nauticus Locally<pre><code>git clone https://github.com/&lt;your-username&gt;/nauticus.git\ncd nauticus\n</code></pre>"},{"location":"contributing/dev-guide/#building-testing","title":"Building &amp; Testing","text":"<p>First you need a local kubernetes cluster if you want to run the controller againt a real API Server, you can create a kind  cluster for this purpose.</p> Create a kind cluster<pre><code>kind create cluster --image kindest/node:v1.24.1 --wait 5m --name nauticus\n</code></pre> <p>The project uses the <code>make</code> build system. It'll run code generators, tests and static code analysis.</p> <p>Start by displaying the help target of make to discover what we can do with make.</p> Display Make Help<pre><code>make help\n</code></pre>"},{"location":"contributing/dev-guide/#initialize-your-dev-environment","title":"Initialize your dev environment","text":"<ol> <li> <p>First Install the <code>golangci-lint</code> tool</p> Install golangci-lint tool<pre><code>make golangci-lint\n</code></pre> </li> <li> <p>Build the controller locally</p> Build the controller locally<pre><code>make build\n</code></pre> </li> <li> <p>Run tests</p> <p>Run tests locally<pre><code>make tests\n</code></pre> 4. Run the controller  Run the controller locally<pre><code>make manifests\nkubectl apply -f config/crd/bases/nauticus.io_spaces.yaml\nmake run\n</code></pre> 5. Lint the code</p> Run the controller locally<pre><code>make golint\n</code></pre> </li> </ol>"},{"location":"contributing/dev-guide/#documentation","title":"Documentation","text":"<p>We use mkdocs material. See <code>/docs</code> for the source code.</p> <p>Install mkdocs using pip:</p> <pre><code>pip install mkdocs-material\n</code></pre> <p>When writing documentation it is advised to run the mkdocs server with livereload:</p> <pre><code>mkdocs serve\n</code></pre> <p>Open <code>http://localhost:8000</code> in your browser.</p> <p>We generate CRD documentation using crddoc, Build the api documentation: Generate Api doc<pre><code>make apidoc\n</code></pre></p>"},{"location":"contributing/process/","title":"Contribution Process","text":""},{"location":"contributing/process/#contributing-to-nauticus","title":"Contributing to Nauticus","text":"<p>Thank you for your interest in contributing to Nauticus. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community.</p> <p>Please read through this document before submitting any issues or pull requests to ensure we have all the  necessary information to effectively respond to your bug report or contribution.</p>"},{"location":"contributing/process/#submitting-a-pull-request","title":"Submitting a Pull Request","text":"<p>This project uses the well-known pull request process from GitHub. To submit a pull request, fork the repository and push any changes to a branch on the copy, from there a pull request can be made in the main repo. Merging a pull request requires the following steps to be completed before the pull request will be merged:</p> <ul> <li>ideally, there is an issue that documents the problem or feature in depth.</li> <li>code must have a reasonable amount of test coverage (work in progress to integrate tests #4)</li> <li>tests must pass (work in progress to integrate tests #4)</li> <li>PR needs be reviewed and approved</li> </ul> <p>Once these steps are completed the PR will be merged by a code owner. We're using the pull request <code>assignee</code> feature to track who is responsible for the lifecycle of the PR: review, merging, ping on inactivity, close. We close pull requests or issues if there is no response from the author for a period of time. Feel free to reopen if you want to get back on it.</p>"},{"location":"contributing/process/#proposal-process","title":"Proposal Process","text":"<p>Before we introduce significant changes to the project we want to gather feedback from the community to ensure that we progress in the right direction before we develop and release big changes. Significant changes include for example:</p> <ul> <li>creating new custom resources</li> <li>proposing breaking changes</li> <li>changing the behavior of the controller significantly</li> </ul> <p>Please create a document in the <code>design/</code> directory based on the template <code>000-template.md</code> and fill in your proposal. Open a pull request in draft mode and request feedback. Once the proposal is accepted and the pull request is merged we can create work packages and proceed with the implementation.</p>"}]}